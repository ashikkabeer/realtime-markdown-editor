'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.getChannel = getChannel;
exports['default'] = share;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = require('./constants');

function getChannel(channel) {
    var c = undefined;

    try {
        c = require('./channel/' + channel + '.js');
    } catch (e) {
        throw new Error('Channel ' + channel + ' is not available.');
    }

    return c;
}

function _share(network, attributes, resolve, reject) {
    var channel = getChannel(network);

    if (channel.type === _constants.TYPE_POPUP) {

        if (_showPopup(channel, attributes)) return resolve();else return reject('Popup blocked for ' + network + '.');
    } else if (channel.type === _constants.TYPE_SDK) {
        channel.action(attributes);
        return resolve();
    }

    return reject(new Error('Invalid channel ' + network));
}

function _showPopup(channel, attributes) {
    var url = _lodash2['default'].template(channel.url)(_lodash2['default'].mapValues(attributes, function (v) {
        return encodeURIComponent(v);
    }));
    var features = _lodash2['default'].reduce(channel.window, function (acc, v, k) {
        acc.push(k + '=' + v);
        return acc;
    }, []).join(',');

    return window.open(url, channel.name, features);
}

function share(network, attributes) {
    return new _Promise(_share.bind(this, network, attributes));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaGFyZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7Ozs7Ozs7cUJBZ0RXLEtBQUs7O3NCQTlDZixRQUFROzs7O3lCQUNlLGFBQWE7O0FBRTNDLFNBQVMsVUFBVSxDQUFFLE9BQU8sRUFBRztBQUNsQyxRQUFJLENBQUMsWUFBQSxDQUFDOztBQUVOLFFBQUk7QUFDQSxTQUFDLEdBQUcsT0FBTyxnQkFBYyxPQUFPLFNBQU0sQ0FBQztLQUMxQyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ1IsY0FBTSxJQUFJLEtBQUssY0FBWSxPQUFPLHdCQUFxQixDQUFDO0tBQzNEOztBQUVELFdBQU8sQ0FBQyxDQUFDO0NBQ1o7O0FBRUQsU0FBUyxNQUFNLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQ2xELFFBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFcEMsUUFBSSxPQUFPLENBQUMsSUFBSSwwQkFBZSxFQUFFOztBQUU3QixZQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQy9CLE9BQU8sT0FBTyxFQUFFLENBQUMsS0FFakIsT0FBTyxNQUFNLHdCQUFzQixPQUFPLE9BQUksQ0FBQztLQUV0RCxNQUFNLElBQUksT0FBTyxDQUFDLElBQUksd0JBQWEsRUFBRTtBQUNsQyxlQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNCLGVBQU8sT0FBTyxFQUFFLENBQUM7S0FFcEI7O0FBRUQsV0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLHNCQUFvQixPQUFPLENBQUcsQ0FBQyxDQUFDO0NBQzFEOztBQUVELFNBQVMsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUU7QUFDckMsUUFBTSxHQUFHLEdBQUcsb0JBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxvQkFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLFVBQUMsQ0FBQyxFQUFLO0FBQy9ELGVBQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaEMsQ0FBQyxDQUFDLENBQUM7QUFDSixRQUFNLFFBQVEsR0FBRyxvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFLO0FBQ3JELFdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0QixlQUFPLEdBQUcsQ0FBQztLQUNkLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztBQUVqQixXQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7Q0FDbkQ7O0FBRWMsU0FBUyxLQUFLLENBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRztBQUNqRCxXQUFPLGFBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDOUQiLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBUWVBFX1BPUFVQLCBUWVBFX1NESyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoYW5uZWwoIGNoYW5uZWwgKSB7XG4gICAgbGV0IGM7XG5cbiAgICB0cnkge1xuICAgICAgICBjID0gcmVxdWlyZShgLi9jaGFubmVsLyR7Y2hhbm5lbH0uanNgKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCAke2NoYW5uZWx9IGlzIG5vdCBhdmFpbGFibGUuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIF9zaGFyZShuZXR3b3JrLCBhdHRyaWJ1dGVzLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBjaGFubmVsID0gZ2V0Q2hhbm5lbChuZXR3b3JrKTtcblxuICAgIGlmIChjaGFubmVsLnR5cGUgPT09IFRZUEVfUE9QVVApIHtcblxuICAgICAgICBpZiAoX3Nob3dQb3B1cChjaGFubmVsLCBhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoYFBvcHVwIGJsb2NrZWQgZm9yICR7bmV0d29ya30uYCk7XG5cbiAgICB9IGVsc2UgaWYgKGNoYW5uZWwudHlwZSA9PT0gVFlQRV9TREspIHtcbiAgICAgICAgY2hhbm5lbC5hY3Rpb24oYXR0cmlidXRlcyk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBjaGFubmVsICR7bmV0d29ya31gKSk7XG59XG5cbmZ1bmN0aW9uIF9zaG93UG9wdXAoY2hhbm5lbCwgYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHVybCA9IF8udGVtcGxhdGUoY2hhbm5lbC51cmwpKF8ubWFwVmFsdWVzKGF0dHJpYnV0ZXMsICh2KSA9PiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodik7XG4gICAgfSkpO1xuICAgIGNvbnN0IGZlYXR1cmVzID0gXy5yZWR1Y2UoY2hhbm5lbC53aW5kb3csIChhY2MsIHYsIGspID0+IHtcbiAgICAgICAgYWNjLnB1c2goayArICc9JyArIHYpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcsJyk7XG5cbiAgICByZXR1cm4gd2luZG93Lm9wZW4odXJsLCBjaGFubmVsLm5hbWUsIGZlYXR1cmVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhcmUoIG5ldHdvcmssIGF0dHJpYnV0ZXMgKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKF9zaGFyZS5iaW5kKHRoaXMsIG5ldHdvcmssIGF0dHJpYnV0ZXMpKTtcbn1cbiJdfQ==