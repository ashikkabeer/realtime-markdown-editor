'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports['default'] = loadSdk;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var requested = {};
var loaded = {};

function _isLoaded(def, config) {
    return !!loaded[def.name] || def.test ? def.test(config) : false;
}

function _isRequested(def) {
    return !!requested[def.name];
}

function _waitFor(def, resolve, reject) {
    return requested[def.name].then(resolve)['catch'](reject);
}

function _request(def, config, resolve, reject) {
    var _this = this;

    requested[def.name] = new _Promise(function (innerResolve, innerReject) {
        if (def.before) def.before(config, innerResolve, innerReject);

        var anchor = document.getElementsByTagName('script')[0];
        var js = document.createElement('script');
        js.src = _lodash2['default'].template(def.url)(config);
        js.async = true;
        js.defer = true;

        if (def.after) js.onload = def.after.bind(_this, config, innerResolve, innerReject);

        anchor.parentNode.insertBefore(js, anchor);
    });

    return _waitFor(def, resolve, reject);
}

function _loadSdk(sdk, config, resolve, reject) {
    var def = undefined;

    try {
        def = require('./sdk/' + sdk + '.js');
    } catch (e) {
        return reject(new Error('SDK ' + sdk + ' is not available.'));
    }

    if (_isLoaded(def, config)) return resolve(def.get(config));

    if (_isRequested(def)) return _waitFor(def, resolve, reject);

    return _request(def, config, resolve, reject);
}

function loadSdk(sdk, config) {
    return new _Promise(_loadSdk.bind(this, sdk, config));
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,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QU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDakQ7O0FBRWMsU0FBUyxPQUFPLENBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtBQUMxQyxXQUFPLGFBQVksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDeEQiLCJmaWxlIjoic2RrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCByZXF1ZXN0ZWQgPSB7fTtcbmNvbnN0IGxvYWRlZCA9IHt9O1xuXG5mdW5jdGlvbiBfaXNMb2FkZWQoZGVmLCBjb25maWcpIHtcbiAgICByZXR1cm4gISFsb2FkZWRbZGVmLm5hbWVdIHx8IGRlZi50ZXN0ID8gZGVmLnRlc3QoY29uZmlnKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfaXNSZXF1ZXN0ZWQoZGVmKSB7XG4gICAgcmV0dXJuICEhcmVxdWVzdGVkW2RlZi5uYW1lXTtcbn1cblxuZnVuY3Rpb24gX3dhaXRGb3IoZGVmLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXR1cm4gcmVxdWVzdGVkW2RlZi5uYW1lXS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG59XG5cbmZ1bmN0aW9uIF9yZXF1ZXN0KGRlZiwgY29uZmlnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXF1ZXN0ZWRbZGVmLm5hbWVdID0gbmV3IFByb21pc2UoKGlubmVyUmVzb2x2ZSwgaW5uZXJSZWplY3QpID0+IHtcbiAgICAgICAgaWYgKGRlZi5iZWZvcmUpXG4gICAgICAgICAgICBkZWYuYmVmb3JlKGNvbmZpZywgaW5uZXJSZXNvbHZlLCBpbm5lclJlamVjdCk7XG5cbiAgICAgICAgY29uc3QgYW5jaG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICBjb25zdCBqcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBqcy5zcmMgPSBfLnRlbXBsYXRlKGRlZi51cmwpKGNvbmZpZyk7XG4gICAgICAgIGpzLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAganMuZGVmZXIgPSB0cnVlO1xuXG4gICAgICAgIGlmIChkZWYuYWZ0ZXIpXG4gICAgICAgICAgICBqcy5vbmxvYWQgPSBkZWYuYWZ0ZXIuYmluZCh0aGlzLCBjb25maWcsIGlubmVyUmVzb2x2ZSwgaW5uZXJSZWplY3QpO1xuXG4gICAgICAgIGFuY2hvci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShqcywgYW5jaG9yKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfd2FpdEZvcihkZWYsIHJlc29sdmUsIHJlamVjdCk7XG59XG5cbmZ1bmN0aW9uIF9sb2FkU2RrKHNkaywgY29uZmlnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgZGVmO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZGVmID0gcmVxdWlyZShgLi9zZGsvJHtzZGt9LmpzYCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgU0RLICR7c2RrfSBpcyBub3QgYXZhaWxhYmxlLmApKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzTG9hZGVkKGRlZiwgY29uZmlnKSlcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZGVmLmdldChjb25maWcpKTtcblxuICAgIGlmIChfaXNSZXF1ZXN0ZWQoZGVmKSlcbiAgICAgICAgcmV0dXJuIF93YWl0Rm9yKGRlZiwgcmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIHJldHVybiBfcmVxdWVzdChkZWYsIGNvbmZpZywgcmVzb2x2ZSwgcmVqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZFNkayggc2RrLCBjb25maWcgKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoX2xvYWRTZGsuYmluZCh0aGlzLCBzZGssIGNvbmZpZykpO1xufVxuIl19